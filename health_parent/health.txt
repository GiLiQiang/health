--------------------------------01、项目概述和环境搭建--------------------------------------
一、系统架构的演变
	1、单体架构：所有模块都在一个war包里，问题：
		扩展受限：无法针对特定模块扩展
		技术债务：不坏不修
		代码耦合：依赖关系不清楚，每次修改都心惊胆战
		迭代困难：随着代码增多，测试、部署的时间会增多
		阻碍创新：引入新技术非常苦难
	2、分布式架构：按照业务逻辑把系统拆分成独立的模块，问题：
		公共业务逻辑无法复用
	3、SOA架构：在分布式架构的基础上，把模块拆分成服务层、表现层，问题：
		Mule：不支持集群
		WSO2：臃肿
		服务调用紊乱
	4、微服务：服务治理方案，代表技术：zookeeper/eureka

二、dubbo介绍
	1、什么是dubbo？
		dubbo[ˈdʌbəʊ]是阿里巴巴一个开源的rpc框架，能和spring无缝集成，dubbo角色如下：
			provider：服务提供者(service、mapper)
			registry：注册中心(zookeeper)
			consumer：服务消费者(controller)
三、zookeeper介绍
	1、什么是zookeeper？
		zookeeper负责地址的注册与查找，是服务提供者和服务调用者的注册中心
	2、zookeeper的安装和启动
		安装：
			解压到桌面
		启动：
			双击/bin/zkServer.cmd
		关闭：
			把窗口关闭
		测试：
			双击/bin/zkCli.cmd
三、dubbo入门
	1、创建工程
		  dubbox_parent：pom，定义依赖
			dubbox_consumer：war
			dubbox_interface：jar
			dubbox_provider：war
	2、发布服务：dubbox_provider
		1、配置zookeeper地址
			<dubbo:registry address="zookeeper://127.0.0.1:2181"></dubbo:registry>
		2、配置当前服务的名字
			<dubbo:application name="dubbox_provider"></dubbo:application>
		3、发布服务
			<dubbo:service interface="com.qf.service.HelloService" ref="helloServiceImpl"></dubbo:service>
		4、配置协议和端口
			<dubbo:protocol name="dubbo" port="28080"></dubbo:protocol>	
	3、消费服务：dubbox_consumer
		1、配置zookeeper地址
			<dubbo:registry address="zookeeper://127.0.0.1:2181"></dubbo:registry>
		2、配置当前服务的名字
			<dubbo:application name="dubbox_consumer"></dubbo:application>
		3、引用服务
			<dubbo:reference interface="com.qf.service.HelloService" id="userService"></dubbo:reference>

--------------------------02、检查项管理----------------------------
1、什么是检查项？
    身高、体重、血压、红细胞
2、表
    t_checkitem(name,sex,age,price)
3、关键对象
    ajax返回值：
        public class Result{
            Boolean flag;
            String message;
            Object data;
        }
